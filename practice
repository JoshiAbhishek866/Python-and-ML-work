'''
to define function we use def 
eg def print(data):
   print("The name is :" + data)
=> print(Cameroon):
   => "The name is : Cameroon"
eg. def area_trianglr(base,height):
     return base8height/2
     
 # in python // or double slash is called floor division of the number , and it is essentially used for taking the integer part of division( Eg 5//2 = 2 ) 
 
eg def function convert_sec(sec):
    hr=sec//3600
    min=(sec-hr*36000//60
    remaining_min=sec-hr*3600-min*60
    return hr,min,remaining_min
 => hr,sec,remaining_sec=convert_sec(5000)     # as we know that fun will return 3 values , 3 variables are there for assignment of value. 
    print( hr,sec,remaining_sec)
     => 1  23 20 
    
 # none datatype in python is used to indicate that things are empty or they doesnt return anything  
  eg of none result= print(Camerron)
     print(result)
     => none
   
 # boolean values has 2 results true or false
 
=> conditions statements in python
   def hint(username)
      if len(username)<3:   # mindwell, : or colon is used after conditional statements in if
         print("Invalid username")
      elif len(username)>15:      # mindwell, : or colon is used after conditional statements in elif
         print("invalid")
      else :                        # mindwell, : or colon is used just after else 
         print("valid username")
 - for loop no of iteration would be n-1 for given parameter n.
    # 1 parameter
   Eg  for x in range(5)    #here range is function for to generate no. here in sequence manner
         print(x)
       => x=0,1,2,3,4 
- FOR - used to do work sequentially in an fixed manner
  WHILE- to repeat actions untill condition changes
- we can specify the size of iteration from starting to ending like 
   # 2 parameter
   eg.  p=1
       for n in range(1,10)
         p=p*n
      print(p)
   => 3628800
- we can also have 3 parameter, in which 1 and 2nd are same as 2 parameterized loop and additional 3ed parameter saya the jump between 2 no.
   eg. for n in range(0,11,2):
    print(n)
# The loop should print 0, 2, 4, 6, 8, 10
- to pickup single element from an loop
eg.  def greet(frnd)
        for frnd in frnds:
           print("Hii" + frnd)
     greet(["Abhishek","Ram","Krishna","Vishnu"])
   # and output is 
  => Hii Abhishek
     Hii Ram
     Hii Krishna
     Hii Vishnu
  #applying same above function greet
   greet("Abhi")
   => Hii A
      Hii B
      Hii H
      Hii I   #as string are iterable , and for loop will go over each letter of string 
      #soln is if u wanna scan each word than a letter than list should be used, where string(word) is part of list
  -> Recursion 
     def recursive_function(parameters):
    if base_case_condition(parameters):
        return base_case_value
    recursive_function(modified_parameters)
=> Strings
-to find length of strings : Len(Stringname) => output: 10
- "abcd"*3 => output: "abcdabcdabcd"
- Example 
    text="Abhishek"
     print(text[-1]) => output:k 
     print(text[-2]) => output:e
=> Sub-Strings
  Example    color="Orange"
             print(color[1:4]) => Output: "ran"
  Example    fruit= "Pineapple"
                  print(color[:3]) => output: Pine
                  print(color[3:]) => output: apple
In python too, Strings are Immutable. 
- .index method is used to find the index number of certain character. 
 Example   word = "supercalifragilisticexpialidocious"
           position = word.index("x")
           print(position)
we can use word "in" to check whether the given sub-string is present in string 
   Example      text="Abhishek"
               "many" in text => Output: False
               "Abhi" in text => Output: True
- Real life example of substring,
   def replace_domain(email,old_domain,new_domain)               #to replace old_domain of mail to new_domain
      if "@" + old_domain in email:                              # to check whether  old domain is present or not 
        index = email.index("@" + old_domain)                    # find mail
        new_email = email[:index] + "@" + new_domain             # to put front of mail part as it is and to to update last part as it is 
        return new_email                                         # to return that mail 
      return email
 - Methods on string 
    -  "Mountains".upper() => "MOUNTAINS"
    - "Mountains".lower() => "mountains"
    -  "   yes   ".strip() => "yes"     #strip method removes extra spaces, extra tabs and new line characters 
            "   yes   ".lstrip() => "yes  "     #lstrip method removes left-side space
            "   yes   ".rstrip() => "  yes"     #rstrip method removes right-side space
    - #method count returns how many times a given substring appears within a string 
        Eg "THe number of times word "e" has occur: ".count("e")
              => output=4
    -  #Method  .endswith insures that substring is present in last portion of string or not. 
         eg "Forest".endswith("rest")
               => output=True 
    - #method .isnumeric returns whether string is numeric or not
                 eg "Forest".isnumeric()
                   => output=False
                 eg "123456".isnumeric()
                   => output=True 
    - # join method is used to concate the strings , The method receives a list of strings and returns one string 
      #  with each of the strings joined by the initial string.
                  eg. "...".join(["This","is","joinedbydots"])
                   => output="This...is   joinedbyspace"
                  eg. "   ".join(["This","is","joinedbyspace"])
                   => output="This   is   joinedbyspace"
   - # The split method returns a list of all the words in the initial string and it automatically splits by any whitespace.
     #  It can optionally take a parameter and split the strings by another character, like a comma or a dot. 
                  eg. "This is abhi".split()
                  => output=["This","is","joinedbyspace"]
     #string.isalpha() - Returns True if there are only alphabetic characters in the string. If not, returns False.
   - Formatting Strings 
          Eg.  name= "Manny"
               number=len(name)*3
               print("Your lucky no. is {number},{name}.".format(name=name, number=len(name)*3))
          => output="Your lucky no. is 15,Manny".
          Eg.  price= 7.5
               with_tax=price*1.8
               print(price,with_tax)                                                    #regular answer 
               =>output: 7.5,8.175 
               print("price:{.2f},with_tax:{.2f}".format(price,with_tax)                 #formatted answer 
               => output: 7.50,8.18
    Eg of formatting 
 {:d} -> integer value -> '{:d}'.format(10.5)                                    → '10'

{:.2f}  -> floating point with that many decimals ->'{:.2f}'.format(0.5)         → '0.50'
{:.2s} ->  string with that many characters  -> '{:.2s}'.format('Python')        → 'Py'
{:<6s} ->  string aligned to the left that many spaces -> '{:<6s}'.format('Py')  → 'Py    '
{:>6s} ->  string aligned to the right that many spaces =>'{:>6s}'.format('Py')   → '    Py'
{:^6s} ->  string centered in that many spaces  => '{:^6s}'.format('Py')          → '  Py  '

=> Lists: they contains the elements in sequential mamnner 
   #While lists and strings are both sequences, a big difference between them is that lists are mutable. 
   #This means that the contents of the list can be changed, unlike strings, which are immutable. 'You can add, remove, or modify elements in a list.

  eg x=["Im","Abhi","from","gondal" ]
     - type(x)   => Output: <class 'list'>
     - len(x)    => Output: 4  #which is no. of elemnets
     - "Im" in x => Output: True
     - "are" in x => Output: False
    # to access the list we have to use indexs
    - print(x[0]) => output: Im
    - print(x[1]) => output: Abhi
#As with strings, we can also use indexes to create a slice of the list. For this, we use ranges of two numbers separated by a colon. 
     - x[1:3] => ["Abhi","gondal"]
     - x[:2]  => ["Im","Abhi"]
     - x[2:]  => ["from","gondal"]
                 #  Or in general terms 
   '''   Common sequence operations
Lists and tuples are both sequences and they share a number of sequence operations. The following common sequence operations are used by both lists and tuples:
 -len(sequence) - Returns the length of the sequence.
-for element in sequence - Iterates over each element in the sequence.
-if element in sequence - Checks whether the element is part of the sequence.
-sequence[x] - Accesses the element at index [x] of the sequence, starting at zero
-sequence[x:y] - Accesses a slice starting at index [x], ending at index [y-1]. If [x] is omitted, the index will start at 0 by default.
  If [y] is omitted, the len(sequence) will set the ending index position by default. 
  - for index, element in enumerate(sequence) - Iterates over both the indices and the elements in the sequence at the same time.
'''
# lists and strings sre similar as they both are sequential and main difference between them is that string is immutable and lists sre mutable. 
 hence lists can be changed and strins cant.
 # You can add elements to the end of a list using the append method. You call this method on a list using dot notation, 
   and pass in the element to be added as a parameter. For example, list.append("New data") would add the string "New data" to the end of the list called list.

'''
List-specific operations and methods
One major difference between lists and tuples is that lists are mutable (changeable) and tuples are immutable (not changeable). There are a few operations and methods that are specific to changing data within lists:
list[index] = x - Replaces the element at index [n] with x.      
  #in general index is used to add element in the begginning and append is used to add element at the ed of the list
list.append(x) - Appends x to the end of the list.
list.insert(index, x) - Inserts x at index position [index].
list.pop(index) - Returns the element at [index] and removes it from the list. If [index] position is not in the list, the last element in the list is returned and removed.
list.remove(x) - Removes the first occurrence of x in the list.
list.sort() - Sorts the items in the list.
list.reverse() - Reverses the order of items of the list.
list.clear() - Deletes all items in the list.
list.copy() - Creates a copy of the list.
list.extend(other_list) - Appends all the elements of other_list at the end of list
'''
# Strings are sequences of characters and are immutable.
#Lists are sequences of elements of any type and are mutable. A third data type that's a sequence and also closely related to lists is the tuple.
# Tuples are sequences of elements of any type that are immutable. We write tuples in parentheses instead of square brackets.
#position of element inside tuples have meaning , thus sequence in tuples matters

    
