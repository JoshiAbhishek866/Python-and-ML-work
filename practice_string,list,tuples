Key : string are immutable and tuples are mutable ; thus  tuple are  mutable strings 
    : for mutable changes in copy will be reflected on original, as both tuples point to single entity.So solution is .( ie list1[] = list2[] ).


=> Strings
-to find length of strings : Len(Stringname) => output: 10
- "abcd"*3 => output: "abcdabcdabcd"
- Example 
    text="Abhishek"
     print(text[-1]) => output:k 
     print(text[-2]) => output:e
=> Sub-Strings
  Example    color="Orange"
             print(color[1:4]) => Output: "ran"
  Example    fruit= "Pineapple"
                  print(color[:3]) => output: Pine
                  print(color[3:]) => output: apple
In python too, Strings are Immutable. 
- .index method is used to find the index number of certain character. 
 Example   word = "supercalifragilisticexpialidocious"
           position = word.index("x")
           print(position)
we can use word "in" to check whether the given sub-string is present in string 
   Example      text="Abhishek"
               "many" in text => Output: False
               "Abhi" in text => Output: True
- Real life example of substring,
   def replace_domain(email,old_domain,new_domain)               #to replace old_domain of mail to new_domain
      if "@" + old_domain in email:                              # to check whether  old domain is present or not 
        index = email.index("@" + old_domain)                    # find mail
        new_email = email[:index] + "@" + new_domain             # to put front of mail part as it is and to to update last part as it is 
        return new_email                                         # to return that mail 
      return email
 - Methods on string 
    -  "Mountains".upper() => "MOUNTAINS"
    - "Mountains".lower() => "mountains"
    -  "   yes   ".strip() => "yes"     #strip method removes extra spaces, extra tabs and new line characters 
            "   yes   ".lstrip() => "yes  "     #lstrip method removes left-side space
            "   yes   ".rstrip() => "  yes"     #rstrip method removes right-side space
    - #method count returns how many times a given substring appears within a string 
        Eg "THe number of times word "e" has occur: ".count("e")
              => output=4
    -  #Method  .endswith insures that substring is present in last portion of string or not. 
         eg "Forest".endswith("rest")
               => output=True 
    - #method .isnumeric returns whether string is numeric or not
                 eg "Forest".isnumeric()
                   => output=False
                 eg "123456".isnumeric()
                   => output=True 
    - # join method is used to concate the strings , The method receives a list of strings and returns one string 
      #  with each of the strings joined by the initial string.
                  eg. "...".join(["This","is","joinedbydots"])
                   => output="This...is   joinedbyspace"
                  eg. "   ".join(["This","is","joinedbyspace"])
                   => output="This   is   joinedbyspace"
   - # The split method returns a list of all the words in the initial string and it automatically splits by any whitespace.
     #  It can optionally take a parameter and split the strings by another character, like a comma or a dot. 
                  eg. "This is abhi".split()
                  => output=["This","is","joinedbyspace"]
     #string.isalpha() - Returns True if there are only alphabetic characters in the string. If not, returns False.
   - Formatting Strings 
          Eg.  name= "Manny"
               number=len(name)*3
               print("Your lucky no. is {number},{name}.".format(name=name, number=len(name)*3))
          => output="Your lucky no. is 15,Manny".
          Eg.  price= 7.5
               with_tax=price*1.8
               print(price,with_tax)                                                    #regular answer 
               =>output: 7.5,8.175 
               print("price:{.2f},with_tax:{.2f}".format(price,with_tax)                 #formatted answer 
               => output: 7.50,8.18
    Eg of formatting 
 {:d} -> integer value -> '{:d}'.format(10.5)                                    → '10'

{:.2f}  -> floating point with that many decimals ->'{:.2f}'.format(0.5)         → '0.50'
{:.2s} ->  string with that many characters  -> '{:.2s}'.format('Python')        → 'Py'
{:<6s} ->  string aligned to the left that many spaces -> '{:<6s}'.format('Py')  → 'Py    '
{:>6s} ->  string aligned to the right that many spaces =>'{:>6s}'.format('Py')   → '    Py'
{:^6s} ->  string centered in that many spaces  => '{:^6s}'.format('Py')          → '  Py  '

=> Lists: they contains the elements in sequential mamnner 
   #While lists and strings are both sequences, a big difference between them is that lists are mutable. 
   #This means that the contents of the list can be changed, unlike strings, which are immutable. 'You can add, remove, or modify elements in a list.

  eg x=["Im","Abhi","from","gondal" ]
     - type(x)   => Output: <class 'list'>
     - len(x)    => Output: 4  #which is no. of elemnets
     - "Im" in x => Output: True
     - "are" in x => Output: False
    # to access the list we have to use indexs
    - print(x[0]) => output: Im
    - print(x[1]) => output: Abhi
#As with strings, we can also use indexes to create a slice of the list. For this, we use ranges of two numbers separated by a colon. 
     - x[1:3] => ["Abhi","gondal"]
     - x[:2]  => ["Im","Abhi"]
     - x[2:]  => ["from","gondal"]
                 #  Or in general terms 
   '''   Common sequence operations
Lists and tuples are both sequences and they share a number of sequence operations. The following common sequence operations are used by both lists and tuples:
 -len(sequence) - Returns the length of the sequence.
-for element in sequence - Iterates over each element in the sequence.
-if element in sequence - Checks whether the element is part of the sequence.
-sequence[x] - Accesses the element at index [x] of the sequence, starting at zero
-sequence[x:y] - Accesses a slice starting at index [x], ending at index [y-1]. If [x] is omitted, the index will start at 0 by default.
  If [y] is omitted, the len(sequence) will set the ending index position by default. 
  - for index, element in enumerate(sequence) - Iterates over both the indices and the elements in the sequence at the same time.
'''
# lists and strings sre similar as they both are sequential and main difference between them is that string is immutable and lists sre mutable. 
 hence lists can be changed and strins cant.
 # You can add elements to the end of a list using the append method. You call this method on a list using dot notation, 
   and pass in the element to be added as a parameter. For example, list.append("New data") would add the string "New data" to the end of the list called list.

'''
List-specific operations and methods
One major difference between lists and tuples is that lists are mutable (changeable) and tuples are immutable (not changeable). There are a few operations and methods that are specific to changing data within lists:
list[index] = x - Replaces the element at index [n] with x.      
  #in general index is used to add element in the begginning and append is used to add element at the ed of the list
list.append(x) - Appends x to the end of the list.   
                                     # to add element in list
list.index(x)   #tells the index of the element x in given list 
list.sort() - it will sort elements of list
list.insert(index, x) 
  # to Inserts x at index position [index] or to insert in the specific position in the list .

list.pop(index) - Returns the element at [index] and removes it from the list. If [index] position is not in the list, the last element in the list is returned and removed.
list.remove(x) - Removes the first occurrence of x in the list.
list.sort() - Sorts the items in the list.
list.reverse() - Reverses the order of items of the list. 
list.clear() - Deletes all items in the list.
list.copy() - Creates a copy of the list.
list.extend(other_list) - Appends all the elements of other_list at the end of 
eg m=[100,200,300] and l=[1,2,3,4]
l.extend(m)  => output : [1,2,3,4.100,200,300]

'''
# Strings are sequences of characters and are immutable.
#Lists are sequences of elements of any type and are mutable. A third data type that's a sequence and also closely related to lists is the tuple.

                       #Remember  Tuples are sequences of elements of any type that are immutable. We write tuples in parentheses instead of square brackets.
                       
#position of element inside tuples have meaning , thus sequence in tuples matters
#When we covered for loops, we showed the example of iterating over a list. This lets you iterate over each element in the list, exposing the element to the for loop as a variable.
#But what if you want to access the elements in a list, along with the index of the element in question? You can do this using the enumerate() function.
#The enumerate() function takes a list as a parameter and returns a tuple for each element in the list. The first value of the tuple is the index and the second value is the element itself.
 """
 #List
 Lists are ordered collection of data items.
They store multiple items in a single variable.
List items are separated by commas and enclosed within square brackets [].
Lists are changeable meaning we can alter them after creation.
Example 1:
lst1 = [1,2,2,3,5,4,6]
lst2 = ["Red", "Green", "Blue"]
print(lst1)
print(lst2)
Output:
[1, 2, 2, 3, 5, 4, 6]
['Red', 'Green', 'Blue']
Example 2:
details = ["Abhijeet", 18, "FYBScIT", 9.8]
print(details)
Output:
['Abhijeet', 18, 'FYBScIT', 9.8]
As we can see, a single list can contain items of different data types.
#Negative indexing 
lst1 = [1,2,2,3,5]
print(lst1[-3])  => Output: 2  #negative indexing
print(lst1[len(lst1)-3])  => Output: 2   #positive indexing 
print(lst1[5-3])  => Output: 2   #positive indexing 
print(lst1[2])  => Output: 2   #positive indexing 
#thus in list it can be changed none liken strings which are immutable 
#Slicing of lists 
print(lst1[2])  => Output: 2   #positive indexing 
         #Remember  print(lst1[1:])  === print(lst1[1:len(lst1)])
         #Remember  print(lst1[:3] === print(lst1[0:3]) 
         #Remember  print(lst[:]) === print(0:len(lst1))
#reference in list 
 l=[1,2,3,4,5]
 print(l)  => [1,2,3,4,5]
 m=l 
 m[0]=0 # here on doing this step not only m[0]=0 but l[0]=0 as there is only one list with 2 reference called l and m. 
 #solution 
 m=l.copy() #now all the changes will be applied to m, only not to l as mi not l , m is copy of l.
 
 => Tuples 
 #Lists are sequences of elements of any type and are mutable. A third data type that's a sequence and also closely related to lists is the tuple.
                             #Remember  Tuples are sequences of elements of any type that are immutable. We write tuples in parentheses instead of square brackets.
     eg tuple1 = (1,2,2,3,5,4,6)
     # if you want to write only one element in tuple the syntax is 
      eg one_element_tuple = (1,)  # right syntax for 1 element 
      
      one_element_tuple[0]=50 #it is wrong syntax as tuples are immutable or unchangeable 
      # thus tuples are type of list which cant be changed 
 #slicing in tuples 
 tup = (1,2,45,85,"green",99)
 tup2=tup[1:4]    #tuple[start:end: jumpindex]
 print(tup2) 
 #just like list , following applies to tuple 
         #Remember  print(tup[1:])  === print(tup[1:len(lst1)])
         #Remember  print(tup[:3] === print(tup[0:3]) 
         #Remember  print(tup[:]) === print(0:len(tup))
#it is impossible to directly change tuple , solution this is first convert tuple into list and then manipulate list and convert list into tuple. 
Eg countries = ("Spain", "Italy", "India", "England", "Germany")
temp = list(countries)
temp.append("Russia")       #add item 
temp.pop(3)                 #remove item
temp[2] = "Finland"         #change item
countries = tuple(temp)
print(countries)           #output => ('Spain', 'Italy', 'Finland', 'Germany', 'Russia')
#However, we can directly concatenate two tuples without converting them to list.
 eg countries = ("Pakistan", "Afghanistan", "Bangladesh", "ShriLanka")
    countries2 = ("Vietnam", "India", "China")
    southEastAsia = countries + countries2
    print(southEastAsia)    #output => ('Pakistan', 'Afghanistan', 'Bangladesh', 'ShriLanka', 'Vietnam', 'India', 'China')
 #The count() method of Tuple returns the number of times the given element appears in the tuple.
       Syntax:  tuple.count(element)
   Eg Tuple1 = (0, 1, 2, 3, 2, 3, 1, 3, 2)
       res = Tuple1.count(3)
      print('Count of 3 in Tuple1 is:', res)    #output => 3 
#The Index() method returns the position  of the given element from the tuple.
    Syntax: tuple.index(element, start, end)
  Eg Tuple = (0, 1, 2, 3, 2, 3, 1, 3, 2)
     res = Tuple.index(3)
     print('First occurrence of 3 is', res)    #output => 3

  
"""
